#####################################
Lesson 1
#####################################

We'll cover
	- the web (what is it)
	- HTML (main doc type of the web)
	- URLs (how to refer to docs)
	- HTTP (protocol that the web runs on)
	- web applications

The World Wide Web
	- a collection of HTML docs
	- HTML
		- HyperText Markup Language
		- links btwn HTML = Hyper Links
	- Note that we can find many files other than HTML
		- plain text, images, pdfs, videos, etc.
	- Major pieces of the web
			1) You (your computer + browser)
				- browser = a program that displays files found on the web
				- all browsers are a bit different, none are "perfect"
				- must always keep in mind that all browsers behave differently
			2) The Internet
				- the world's largest computer network
			3) HTTP
				- the main protocol of the web
			3) Servers
				- computers that host the files that make up the web
	- So how does this all work?
		- You make requests via the internet to servers, using the HTTP protocol
		- Servers are computers optimized for sitting in a closet, hosting files

HTML basics
	- made up of:
		- text content
			- "what you see"
			- if you just enter text with zero markup, it will simpply show up as plain text
		- markup
			- "what it looks like"
			- Elements:
				<NAME>Contents</NAME>
			- tags can be nested
		- references to
			- "i.e. images and videos"
		- links to other pages
	- Example tabs:
		- bold tag
			<b>Makes stuff bold</b>
		- emphasis tag
			<em>Makes stuff italic</em>
		- anchor tag
			<a href="www.reddit.com">derp</a>
		- images tag
			<img src="url" alt="text">
				- note the two attributes, src and alt
				- definitely nice to include alt, good for broken pages and blind people
				- image tags are VOID tags
					- they have no content, so they don't need a closing tag
				- note that images just appear in line with text
	- What happens when we forget to close tags?
		- say it's an <em> tag, everything after will be italicized
		- depends on the tag/browser, though
	- Whitespace
		- in HTML all whitespace (tabs, single spaces, multiple spaces, new lines) turn into single spaces
		- BY DEFAULT, ANY AMOUNT OF WHITESPACE TURNS INTO A SINGLE SPACE
		- for example:
			this text is really
			too long for one line
		- displays as:
			this text is really too long for one line
		- if we want a new line
			this text is really
			<br>
			too long for one line
		- or a blank line between
			this text is really
			<br>
			<br>
			too long for one line
	- Other ways of doing new lines
		- paragraph tag
			<p>this text is really</p>
			<p>too long for onw linw</p>
	- Inline vs. block
		- the <br> tag is inline
			- it just ends a line
			- examples: <b>, <em>, <img>, <span>
		- the <p> tag is block
			- it creates an invisible box, with things lke a 
			- examples: <p>, <div>
		- <span> and <div> are basically inline and block versions of the same thing
			- they just contain text, but don't do anything else

HTML documents
	- Example of basic structure:
<!doctype html>
<html>
<head>
	<title>Title!</title>
</head>
<body>
	<b>content</b>
</body>
</html>

		- head contains meta-data, title, JavaScript, CSS, etc.
			- also contains the doctype
		- body contains the actual contents of the document
			- for most of this course we'll be working on generating the contents of the body tags

URLs
	- Uniform Resource Locator
	- Example:
			http://www.udacity.com/
				Protocol: http
					- could also be something like ftp
				Host: www.udacity.com
					- domain name of server that has the doc we want to fetch
					- can also just be an IP address
				Path: /
	- Query parameters
		- also called GET parameters
		- example:
			http://example.com/foo?P=1&q=neat
				- First parameter is after the ?, subsequent parameters are after the &
					- so in this case parameter P is "1", parameter q is "neat"
				- when you make a request to the server for said path, you ALSO pass this extra info
					- all sorts of handy uses for this!
	- Fragments
		- represented with a # sign
		- examples:
			http://www.example.com/foo#fragment
			http://www.example.com/foo?p=1#fragment
		- note that fragments come after query params
		- fragments ARE NOT SENT TO THE SERVER, just used on the local machine
	- Ports
		- to connect to a machine, you need the host AND the port
		- by default the port = 80, so:
			http://www.example.com/
			- Is really
			http://www.example.com:80/
		- You can also explicitly specify the port
			http://localhost:8000/
	- Final example of structure:
		http://example.com:80/toys?p=foo#blah
	- There are other parts to a url, but we won't cover them now

HTTP Requests
	- HTTP
			-HyperText Transfer Protocol
			- the main protocol of the web
				- what our browser uses to talk to web servers
	- For example, when we type:
		htttp://www.example.com/foo
		- We send this request line
		GET /foo HTTP/1.1
			- GET is the method
				- most often used for getting docs from the server
				- another popular method is POST
					- most often used for posting data to the server
			- /foo is the path
				- the actual document we're requesting
			- HTTP/1.1 is the version
				- most browser speak 1.1, but 1.0 still has a few uses
			- Note that there's no host name
				- Our browser already connected to the host
					- www.example.com was used to make this connection
				- it's just the /foo part that's making the request
	- More complex example:
		- URL
			http://www.example.com/foo/logo.png?p=1#tricky
		- GET request:
			GET /foo/logo.png?p=1 HTTP/1.1
		- Note that the path...
			- INCLUDES the query parameters
			- DOESN'T INCLUDE fragments
	- The request line is followed by a number of headers, for example:
		GET /foo?p=1 HTTP/1.1
		Host: www.example.com
		User-Agent: chrome
		- We're already connected to the server, why do we need the host?
			- Because one server can host multiple websites!
		- User-Agent is generally your browser
			- if one IP and one fake user agent is just pumelling your site, they're probably malicious
	- Valid Headers:
			Host: www.hipmunk.com
			User-Agent: Chrome
			i-made-this-up: whatever
	- Invalid headers
			User Agent: Chrome
			Host www.hipmunk.com
	- HEADERS NAMES MUST BE ALL ONE WORD, AND MUST BE FOLLOWED BY A ": "

HTTP Responses
	- Browser makes a request, server responds with a response
	- Returns docs plus...
	- Basic HTTP response:
		- Request:
			- Request line:
				GET /foo HTTP/1.1
		- Response:
			- Status line (alagous to request line):
				HTTP/1.1 200 OK
					- version status-code reason-phrase
					- Common status codes:
						- 200 OK
							- "Document was found"
							- the most common status code on the internet
						- 302 Found
							- "Document is located somewhere else"
						- 404 Not Found
							- "Document was not found"
						- 500 Server Error
							- Server broke trying to handle your request
		- Status codes start with a 1, 2, 3, 4 or 5
			- 2 = success
			- 3 = need to do something different to find this doc
			- 4 = error on the browser side (trying to request a doc that doesn't exist)
			- 5 = error on the server side
	- Status line is followed by headers
		- Example:
				HTTP/1.1 200 OK
				Date: Tue Mar 2012 04:33:33 GMT
				Server: Apache/2.2.3
				Content-Type: text/html;
				Content-Length: 1539
		- Some headers are required, some are not
			- Date is always there
			- You may not want to include the server, or to make something up
				- Why display vulnerabilities to a hacker?
			- Content type is always there
			- Content length is somewhat optional

Playing around with HTTP requests
	- Open terminal, enter:

telnet www.yashley2014.com 80

	- This is what your browser is sending when you enter the URL www.yashley2014.com (it's going to port 80)
	- Returns:

Trying 74.125.28.147...
Connected to http://www.yashley2014.com.
Escape character is '^]'.

	- Then we can include the GET request

GET / HTTP/1.0
Host: www.yashley2014.com

	- Why HTTP 1.0 and not 1.1?
		 - The default behaviour in 1.1 is to not close the connection once it's finished, which is annoying for testing
	- Returns:

HTTP/1.1 200 OK
Server: nginx/1.4.3
Date: Sun, 05 Jan 2014 01:11:31 GMT
Content-Type: text/html
Content-Length: 3110
Last-Modified: Mon, 04 Nov 2013 03:51:03 GMT
Connection: close
ETag: "527719a7-c26"
Accept-Ranges: bytes

<!DOCTYPE html>
<!-- saved from url=(0043)http://getbootstrap.com/examples/jumbotron/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
etc. (more HTML code)

	- So we see the HTTP response there at the top!
		- the status line, and a whole bunch of headers

	- What if you get a 302 error?
		- it should return a "Location" header
			- this should tell you where the document is actually located (a new URL)
		- if you do a GET request for this new URL, you *SHOULD* get a 200 response, with your doc


Servers
	- Purpose: to respond to HTTP requests
	- 2 main types of responses from servers
		1) Static
			- server returns a pre-written file
				- e.g. an image
		2) Dynamic
			- response built on the fly by the program that's running on the server
			- most sites now are built dynamically, on the fly, by web applications
	- So a web application lives on a server, gets HTTP requests, and generates documents to return to clients


#####################################
Problem Set 1
#####################################

Directions:
	- Install Google App Engine (the Pythin version)
	- Put online a basic app that says "Hello, Udacity!"
	- Submit the URL to Udacity

Basically just follow directions on this page:
https://developers.google.com/appengine/?csw=1#getstarted-framework-flask

My local copy is at:
/Users/yasha.podeswa/Documents/everything_else/git_repos/appengine-django-skeleton

/usr/local/google_appengine points to the SDK, so add this to my path

Open the Google app engine app, create a new project
Mine is called "hello-udacity-yasha"
And it's located at:
/Users/yasha.podeswa/Documents/everything_else/git_repos/hello-udacity-yasha

Edit main.py so the argument here is 'Hello Udacity!'
class MainHandler(webapp2.RequestHandler):
    def get(self):
        self.response.write('Hello Udacity!')

Make the app in the online app engine console as well

Deploy with the local app engine program

Go to:
http://hello-udacity-yasha.appspot.com/

To see it deployed

Or, to run it locally:

Through the GUI, simply click run

Or, through terminal

cd to the app
dev_appserver.py .

. is for current directory, or you can type the directory

Then visit at localhost:8080

And to deploy online:

appcfg.py update .

User: ypodeswa@gmail.com
Paswword: mypass

Or just use deploy in the GUI

Again, to see it deployed, go to:
http://hello-udacity-yasha.appspot.com/



LEFT OFF AT THE START OF "Office Hours 1"
