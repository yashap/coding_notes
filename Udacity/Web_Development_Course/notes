#####################################
Lesson 1
#####################################

We'll cover
	- the web (what is it)
	- HTML (main doc type of the web)
	- URLs (how to refer to docs)
	- HTTP (protocol that the web runs on)
	- web applications

The World Wide Web
	- a collection of HTML docs
	- HTML
		- HyperText Markup Language
		- links btwn HTML = Hyper Links
	- Note that we can find many files other than HTML
		- plain text, images, pdfs, videos, etc.
	- Major pieces of the web
			1) You (your computer + browser)
				- browser = a program that displays files found on the web
				- all browsers are a bit different, none are "perfect"
				- must always keep in mind that all browsers behave differently
			2) The Internet
				- the world's largest computer network
			3) HTTP
				- the main protocol of the web
			3) Servers
				- computers that host the files that make up the web
	- So how does this all work?
		- You make requests via the internet to servers, using the HTTP protocol
		- Servers are computers optimized for sitting in a closet, hosting files

HTML basics
	- made up of:
		- text content
			- "what you see"
			- if you just enter text with zero markup, it will simpply show up as plain text
		- markup
			- "what it looks like"
			- Elements:
				<NAME>Contents</NAME>
			- tags can be nested
		- references to
			- "i.e. images and videos"
		- links to other pages
	- Example tabs:
		- bold tag
			<b>Makes stuff bold</b>
		- emphasis tag
			<em>Makes stuff italic</em>
		- anchor tag
			<a href="www.reddit.com">derp</a>
		- images tag
			<img src="url" alt="text">
				- note the two attributes, src and alt
				- definitely nice to include alt, good for broken pages and blind people
				- image tags are VOID tags
					- they have no content, so they don't need a closing tag
				- note that images just appear in line with text
	- What happens when we forget to close tags?
		- say it's an <em> tag, everything after will be italicized
		- depends on the tag/browser, though
	- Whitespace
		- in HTML all whitespace (tabs, single spaces, multiple spaces, new lines) turn into single spaces
		- BY DEFAULT, ANY AMOUNT OF WHITESPACE TURNS INTO A SINGLE SPACE
		- for example:
			this text is really
			too long for one line
		- displays as:
			this text is really too long for one line
		- if we want a new line
			this text is really
			<br>
			too long for one line
		- or a blank line between
			this text is really
			<br>
			<br>
			too long for one line
	- Other ways of doing new lines
		- paragraph tag
			<p>this text is really</p>
			<p>too long for onw linw</p>
	- Inline vs. block
		- the <br> tag is inline
			- it just ends a line
			- examples: <b>, <em>, <img>, <span>
		- the <p> tag is block
			- it creates an invisible box, with things lke a 
			- examples: <p>, <div>
		- <span> and <div> are basically inline and block versions of the same thing
			- they just contain text, but don't do anything else

HTML documents
	- Example of basic structure:
<!doctype html>
<html>
<head>
	<title>Title!</title>
</head>
<body>
	<b>content</b>
</body>
</html>

		- head contains meta-data, title, JavaScript, CSS, etc.
			- also contains the doctype
		- body contains the actual contents of the document
			- for most of this course we'll be working on generating the contents of the body tags

URLs
	- Uniform Resource Locator
	- Example:
			http://www.udacity.com/
				Protocol: http
					- could also be something like ftp
				Host: www.udacity.com
					- domain name of server that has the doc we want to fetch
					- can also just be an IP address
				Path: /
	- Query parameters
		- also called GET parameters
		- example:
			http://example.com/foo?P=1&q=neat
				- First parameter is after the ?, subsequent parameters are after the &
					- so in this case parameter P is "1", parameter q is "neat"
				- when you make a request to the server for said path, you ALSO pass this extra info
					- all sorts of handy uses for this!
	- Fragments
		- represented with a # sign
		- examples:
			http://www.example.com/foo#fragment
			http://www.example.com/foo?p=1#fragment
		- note that fragments come after query params
		- fragments ARE NOT SENT TO THE SERVER, just used on the local machine
	- Ports
		- to connect to a machine, you need the host AND the port
		- by default the port = 80, so:
			http://www.example.com/
			- Is really
			http://www.example.com:80/
		- You can also explicitly specify the port
			http://localhost:8000/
	- Final example of structure:
		http://example.com:80/toys?p=foo#blah
	- There are other parts to a url, but we won't cover them now

HTTP Requests
	- HTTP
			-HyperText Transfer Protocol
			- the main protocol of the web
				- what our browser uses to talk to web servers
	- For example, when we type:
		htttp://www.example.com/foo
		- We send this request line
		GET /foo HTTP/1.1
			- GET is the method
				- most often used for getting docs from the server
				- another popular method is POST
					- most often used for posting data to the server
			- /foo is the path
				- the actual document we're requesting
			- HTTP/1.1 is the version
				- most browser speak 1.1, but 1.0 still has a few uses
			- Note that there's no host name
				- Our browser already connected to the host
					- www.example.com was used to make this connection
				- it's just the /foo part that's making the request
	- More complex example:
		- URL
			http://www.example.com/foo/logo.png?p=1#tricky
		- GET request:
			GET /foo/logo.png?p=1 HTTP/1.1
		- Note that the path...
			- INCLUDES the query parameters
			- DOESN'T INCLUDE fragments
	- The request line is followed by a number of headers, for example:
		GET /foo?p=1 HTTP/1.1
		Host: www.example.com
		User-Agent: chrome
		- We're already connected to the server, why do we need the host?
			- Because one server can host multiple websites!
		- User-Agent is generally your browser
			- if one IP and one fake user agent is just pumelling your site, they're probably malicious
	- Valid Headers:
			Host: www.hipmunk.com
			User-Agent: Chrome
			i-made-this-up: whatever
	- Invalid headers
			User Agent: Chrome
			Host www.hipmunk.com
	- HEADERS NAMES MUST BE ALL ONE WORD, AND MUST BE FOLLOWED BY A ": "

HTTP Responses
	- Browser makes a request, server responds with a response
	- Returns docs plus...
	- Basic HTTP response:
		- Request:
			- Request line:
				GET /foo HTTP/1.1
		- Response:
			- Status line (alagous to request line):
				HTTP/1.1 200 OK
					- version status-code reason-phrase
					- Common status codes:
						- 200 OK
							- "Document was found"
							- the most common status code on the internet
						- 302 Found
							- "Document is located somewhere else"
						- 404 Not Found
							- "Document was not found"
						- 500 Server Error
							- Server broke trying to handle your request
		- Status codes start with a 1, 2, 3, 4 or 5
			- 2 = success
			- 3 = need to do something different to find this doc
			- 4 = error on the browser side (trying to request a doc that doesn't exist)
			- 5 = error on the server side
	- Status line is followed by headers
		- Example:
				HTTP/1.1 200 OK
				Date: Tue Mar 2012 04:33:33 GMT
				Server: Apache/2.2.3
				Content-Type: text/html;
				Content-Length: 1539
		- Some headers are required, some are not
			- Date is always there
			- You may not want to include the server, or to make something up
				- Why display vulnerabilities to a hacker?
			- Content type is always there
			- Content length is somewhat optional

Playing around with HTTP requests
	- Open terminal, enter:

telnet www.yashley2014.com 80

	- This is what your browser is sending when you enter the URL www.yashley2014.com (it's going to port 80)
	- Returns:

Trying 74.125.28.147...
Connected to http://www.yashley2014.com.
Escape character is '^]'.

	- Then we can include the GET request

GET / HTTP/1.0
Host: www.yashley2014.com

	- Why HTTP 1.0 and not 1.1?
		 - The default behaviour in 1.1 is to not close the connection once it's finished, which is annoying for testing
	- Returns:

HTTP/1.1 200 OK
Server: nginx/1.4.3
Date: Sun, 05 Jan 2014 01:11:31 GMT
Content-Type: text/html
Content-Length: 3110
Last-Modified: Mon, 04 Nov 2013 03:51:03 GMT
Connection: close
ETag: "527719a7-c26"
Accept-Ranges: bytes

<!DOCTYPE html>
<!-- saved from url=(0043)http://getbootstrap.com/examples/jumbotron/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
etc. (more HTML code)

	- So we see the HTTP response there at the top!
		- the status line, and a whole bunch of headers

	- What if you get a 302 error?
		- it should return a "Location" header
			- this should tell you where the document is actually located (a new URL)
		- if you do a GET request for this new URL, you *SHOULD* get a 200 response, with your doc


Servers
	- Purpose: to respond to HTTP requests
	- 2 main types of responses from servers
		1) Static
			- server returns a pre-written file
				- e.g. an image
		2) Dynamic
			- response built on the fly by the program that's running on the server
			- most sites now are built dynamically, on the fly, by web applications
	- So a web application lives on a server, gets HTTP requests, and generates documents to return to clients


#####################################
Problem Set 1
#####################################

Directions:
	- Install Google App Engine (the Pythin version)
	- Put online a basic app that says "Hello, Udacity!"
	- Submit the URL to Udacity

Basically just follow directions on this page:
https://developers.google.com/appengine/?csw=1#getstarted-framework-flask

My local copy is at:
/Users/yasha.podeswa/Documents/everything_else/git_repos/appengine-django-skeleton

/usr/local/google_appengine points to the SDK, so add this to my path

Open the Google app engine app, create a new project
Mine is called "hello-udacity-yasha"
And it's located at:
/Users/yasha.podeswa/Documents/everything_else/git_repos/hello-udacity-yasha

Edit main.py so the argument here is 'Hello Udacity!'
class MainHandler(webapp2.RequestHandler):
    def get(self):
        self.response.write('Hello Udacity!')

Make the app in the online app engine console as well

Deploy with the local app engine program

Go to:
http://hello-udacity-yasha.appspot.com/

To see it deployed

Or, to run it locally:

Through the GUI, simply click run

Or, through terminal

cd to the app
dev_appserver.py .

. is for current directory, or you can type the directory

Then visit at localhost:8080

And to deploy online:

appcfg.py update .

User: ypodeswa@gmail.com
Paswword: mypass

Or just use deploy in the GUI

Again, to see it deployed, go to:
http://hello-udacity-yasha.appspot.com/


#####################################
Office Hours 1
#####################################

Questions and Answers:

- Why Google App Engine?
	- Easiest way to get something up an running
- What is Google App Enginge
	- You just write Python code
	- You use the console or launcher to upload your app
- What are some useful things to know about front end app development?
	- Need to know HTML, CSS, JS
- Is Google App Engine a good solution for large scale projects?
	- Many people do use it in production
	- But it can get a bit expensive
	- ALSO, when we start doing things like user registration and cookies, we'll be looking at it from a general overall sense


#####################################
Lesson 2
#####################################

Forms
	- We'll be working with the file "play.html"
	- See <form> tag in play.html

<form>
	<input name="q">
</form>

	- What happens when a user types "hello", then hits enter on the form?
	- the url changes to: play.html?q=hello

	- Let's add a submit button:

<form>
	<input name="q">
	<input type="submit">
</form>

	- creates a submit button, which is no different to submitting with enter

	- Ok, so now the form just submits to itself, which kind of sucks
	- How do we make it submit elsewhere?
		- With the "action" attribute

<form action="/foo">
	<input name="q">
	<input type="submit">
</form>

	- the action tag contains the URL where we should search to
	- for example:

<form action="http://www.google.com/search">
	<input name="q">
	<input type="submit">
</form>

	- Now queries are submitted to Google search results, and our browser re-directs there!
		- Why did this work?
			- We generated code that sent us to:
				http://www.google.com/search?q=what+we+searched
			- This is the same syntax Google search uses!
	- Why the "pluses"?
		- URLs can't have spaces in them
		- Browser did "URL encoding"
			- turns spaces into pluses
		- There are other escape characters, i.e.
			- many browsers turn ! into %21, for example

###########
Live web applications
###########

	- Let's start with the simple hello world Python example that Google has on the app engine

import webapp2

class MainHandler(webapp2.RequestHandler):
	def get(self):
		self.response.headers['Content-Type'] = 'text/plain'
		self.response.write('Hello, Udacity!')

app = webapp2.WSGIApplication([('/', MainHandler)], debug=True)

The "app = " line is the URL mapping section
	- there's one URL, "/", and it maps to the handler "MainHandler"
	- The class has a function called "get", which takes a parameter called "self" (a common parameter to many Python methods)
		- get does two things:
			1) It takes self.response, the global response object that this framework uses.  Then it sets a header, where the "Content-Type" is set to "text/plain".  By default this is set to "text/html"
			2) Then it writes the string "Hello, Udacity!"

What if we want something more interesting?  Let's replace the string with a variable that holds a string:

import webapp2

form = """
<form action="http://www.google.com/search">
	<input name="q">
	<input type="submit">
</form>
"""

class MainHandler(webapp2.RequestHandler):
	def get(self):
		self.response.headers['Content-Type'] = 'text/plain'
		self.response.write(form)

app = webapp2.WSGIApplication([('/', MainHandler)], debug=True)

But this only returns text showing the HTML, not the rendered HTML!
	- Why?  Because of the "text/html" header!
	- Comment out that line to render properly

Now lets make it submit to the server, not to Google!
	- Change the form's attribute:

<form action="/testform">

	- And also we need our app to be able to handle more than just '/'

class TestHandler(webapp2.RequestHandler):
	def get(self):
		q = self.request.get("q")
		self.response.out.write(q)

app = webapp2.WSGIApplication([('/', MainHandler),
	('/testform', TestHandler)],
	debug=True)

	- Note how we added the URL mapping for '/testform', and had it handled by TestHandler
	- BUT we had to create the TestHandler class!
		- This class:
			- Sets a variable called q, that comes from self.request
				- response is an object representing the response we'll send to the client
				- request is an object representing the request we'll get from the client
					- we can call get on it to get different parameters (in this case we're 'getting' the parameter q)
			- returns q
				- So the response will now display this variable
				- So now when we submit "hello", it will just return a page saying "hello", at the URL http://localhost:8080/testform?q=hello

- What if we change TestHandler to this, then submit?

class TestHandler(webapp2.RequestHandler):
	def get(self):
		# q = self.request.get("q")
		# self.response.out.write(q)
		self.response.headers['Content-Type'] = 'text/plain'
		self.response.out.write(self.request)

- We see the HTTP request!
GET /testform?q=hello+world HTTP/1.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.8
Host: localhost:8080
Referer: http://localhost:8080/
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36
X-Appengine-Country: ZZ

- There's the request line, then a bunch of headers
	- The Referer header is interesting, it tells you the URL that sent the request
		- Also, Referer is misspelled :)  Happened once, kept that way for backwards compatibility
- Note that if we hadn't set the content type to text/plain, it would have looked weird
- We printed out the Python object self.request
	- This object prints to look exactly like an HTTP request

The above is a very handy debugging tool!


Ok, let's add a new method to our form, "post"
	- We do this in the HTML:

form = """
<form method="post" action="/testform">
	<input name="q">
	<input type="submit">
</form>
"""

	- the default for forms method is "get"
		- but here we can specify a different method for what will happen when you submit
	- What will happen if we submit now?
		- We get the following error message
"""405 Method Not Allowed
The method POST is not allowed for this resource."""

- Remember, 405 is the status code
	- status codes starting with 4 are errors on the browser side
	- this one means "method not allowed"
- What's wrong?
	- The handler class for /testform is TestHandler
	- This class does not have a method defining what to do with get methods
		- let's add one:

class TestHandler(webapp2.RequestHandler):
	def get(self):
		q = self.request.get("q")
		self.response.out.write(q)
	def post(self):
		q = self.request.get("q")
		self.response.out.write(q)
		# self.response.headers['Content-Type'] = 'text/plain'
		# self.response.out.write(self.request)

- Now it once again just takes us to a new page displaying our query
	- However, the URL is different!
		- instead of:
			localhost:8080/testform?q=hello
		- it's
			localhost:8080/testform
		- there's no query part!
	- How do we see what happened?

class TestHandler(webapp2.RequestHandler):
	def get(self):
		q = self.request.get("q")
		self.response.out.write(q)
	def post(self):
		# q = self.request.get("q")
		# self.response.out.write(q)
		self.response.headers['Content-Type'] = 'text/plain'
		self.response.out.write(self.request)

- And this is what we see:

POST /testform HTTP/1.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.8
Cache-Control: max-age=0
Content-Length: 7
Content-Type: application/x-www-form-urlencoded
Content_Length: 7
Content_Type: application/x-www-form-urlencoded
Host: localhost:8080
Origin: http://localhost:8080
Referer: http://localhost:8080/
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36
X-Appengine-Country: ZZ

q=dfhhh

- So the query has been passes in the HTML request
	- after the HTTP request headers, but still part of the request
	- note also that it's a POST request, not a GET request
- Also note that some headers are printed twice
	- we're not printing the actual request, we're printing the Python representation of the request
	- it's a little glitchy

- GET vs. POST:
	- GET
		- parameters in URL
		- used for fetching documents
		- maximum URL length
		- OK to cache
			- there are lots of machines btwn you and the server
			- caching along the way saves effort
				- You can turn this off with headers, but it's generally good
		- shouldn't change the server
		- OVERALL:
			- GET requests = simple requests for fetching files
			- GET parameters should be used to describe what files to fetch
	- POST
		- parameters in body
		- used for updating data
		- no max URL length (though servers can be configured to have a max length, often a few MB)
		- not OK to cache
			- the data in them is potentially sensitive
		- OK/meant to change the server
			- POST requests are for updating the server
			- POST requests are generally destructive in nature

- What if you don't use these requests as you should?
	- Case study: Base Camp, back in the day
		- you used to see a page with task, and a bunch of "Delete" options beside them
			- clicking delete would remove the item
		- the delete options were HTML links
			- automatically GET requests!
			- POST is for forms, not links
		- There was also another program, Google web accelerator
			- This was a browser extension
			- It would pre-load all links, so they're "ready to go" when you click on them
				- It would pre-load the delete links, and delete all your items!
	- So really these "delete" buttons should have been forms, not links

- Back to playing around with static html
	- simple form

<form>
	<input type="text" name="q">
	<input type="submit">
</form>

- Submit "some junk", will load the same page with the following URL:
file://localhost/Users/yasha.podeswa/Documents/everything_else/git_repos/coding_notes/Udacity/Web_Development_Course/play.html?q=some+junk

- So just adds the query parameter to the URL
	- the type="text" attribute is optional, it's the default
- Let's try other types!
	- type="password"
	- the URL is the same, but text typed in the in input appears as documents
- Key takeway:
	- the password is not sent securely to the server here, it's sent like any other parameter

- type="checkbox"
	- adds ?q=on if the box is checked when you hit submit
	- else simply adds ?
		- the q parameter doesn't appear at all
	- however, not all browsers behave the same
		- best practice when writing server side scripts:
			- treat q=on as checked
			- treat ANYTHING ELSE as off, just in case
	- what if there are a few checkboxes?

<form>
	<input type="checkbox" name="q">
	<input type="checkbox" name="r">
	<input type="checkbox" name="s">
	<br>
	<input type="submit">
</form>

- If you check the first two, the query section (after the ?) of the URL will be:
q=on&r=on

- Note how the parameters are separated by "&"

- type="radio"
	- by default, identical to checkboxes, EXCEPT they can't be unchecked
		- NOT how you'd expect them to perform!
		- how to make them perform as a group, so that only one can be selected at a time?
			- give them all the same name!

<form>
	<input type="radio" name="q">
	<input type="radio" name="q">
	<input type="radio" name="q">
	<br>
	<input type="submit">
</form>

- This makes sense, as only one can be on, no need for multiple names
	- BUT no matter which button you select, q=on
	- How do we know what button was selected?
		- the value parameter!

<form>
	<input type="radio" name="q" value="one">
	<input type="radio" name="q" value="two">
	<input type="radio" name="q" value="three">
	<br>
	<input type="submit">
</form>

- Click the second, submit, and:
q=two
- So it changes the value of the query parameter!

- Ok, so right now we have 3 annonymous radio buttons
	- How do we let the user know what they're clicking on?

<form>
	<label>
		One
		<input type="radio" name="q" value="one">
	</label>

	<label>
		Two
		<input type="radio" name="q" value="two">
	</label>

	<label>
		Three
		<input type="radio" name="q" value="three">
	</label>

	<br>
	<input type="submit">
</form>

- Will add labels in front of the radio buttons

- Lastly, let's look at how to do dropdown form elements:

<form>
	<select name="q">
		<option>one</option>
		<option>two</option>
		<option>three</option>
	</select>

	<br>
	<input type="submit">
</form>

- will give a dropdown
	- selecting the third item and hitting submit will give you:
q=three

- note how it's just the contents of the option tag
	- what if you want a different param passed?
		- use the value parameter!

<form>
	<select name="q">
		<option value="1">one</option>
		<option value="2">two</option>
		<option value="3">three</option>
	</select>

	<br>
	<input type="submit">
</form>

- will return:
q=1


#########
Validation
#########

- Idea - verify on the server side that we received what we expected to received
	- i.e. you're sending q=on
		- that's fine, server knows what to do
	- but what if you send q=broken, and our server doesn't know what to do with it?
		- even if the checkbox can't send this, it doesn't mean that users can't send arbitrary junk to our servers through other means
- Basically, your server can receive junk, and your server needs to know how to deal with it


- Example: back to the live web app
	- I'm not going to take notes on everything, just copy the code
	- Inspect the code to see what happens

- Quiz:
# Write a function valid_month() to verify 
# whether the data a user enters is a valid 
# month. If the passed in parameter 'month' 
# is not a valid month, return nothing. 
# If 'month' is a valid month, then return 
# the name of the month with the first letter 
# capitalized.

months = ['January',
	'February',
	'March',
	'April',
	'May',
	'June',
	'July',
	'August',
	'September',
	'October',
	'November',
	'December']

month_abbvs = dict((m[:3].lower(), m) for m in months)
# What this says is:
#   - we're creating a new dictionary
#   - for m in month (i.e. it will be 'January', then 'February', etc.)
#   - we'll create a dictionary where the keys are a substrings of the first 3 characters, to lower
#   - and the values are the original strings
# print month_abbvs

# If we weren't using the abbreviations:
# def valid_month(month):
# 	if month:
# 		cap_month = month.capitalize()
# 		if cap_month in months:
# 			return cap_month

# Using the abbvs:
def valid_month(month):
	if month:
		short_month = month[:3].lower()
		return month_abbvs.get(short_month)
# The get method of a Python dictionary first checks if the key is in the dict
#   - if it is, it'll return the value

print valid_month('JAN')					# January
print valid_month('JANuary')			# January
print valid_month('Jannnnnnnny')	# January
print valid_month('blah')					# None


# Ok, now let's do the same for days
# My solution:
def valid_day(day):
	if day:
		try:
			day_num = int(day)
		except ValueError:
			day_num = None
		if day_num:
			if day_num >= 1 and day_num <= 31:
				return day_num

# Their solution
def valid_day(day):
	if day and day.isdigit():
		day = int(day)
		if day > 0 and day <= 31:
			return day

# However, I think their solution will only work if passed strings
#  - .isdigit() is a method for strings
#  - if passed a number, you got problems

# Now to test for a valid year, which we'll say is between 1900 and 2020

def valid_year(year):
	if year and year.isdigit():
		year = int(year)
		if year > 1900 and year < 2020:
			return year

- How will these functions fit in?
	1) User makes GET request for the form
	2) Server responds with form data
	3) User makes POST request with the data
	4) Server runs valudation function
		- if data is good, server says thanks
		- if data is bad, re-send form data + error message

- So 3 things we have to do:
	1) Verify the user's input
	2) On error, render form again
	3) Include error message

# String substitution in Python
a = "hello"
print("<b> %s </b>" % a)
# prints: <b> hello </b>

# Another example:
t1 = "I think %s is a perfectly normal thing to do in public."
def sub1(s):
	return t1 % s
print sub1("running") 
# => "I think running is a perfectly normal thing to do in public."    

# Or to substitute multiple strings
t2 = "I think %s and %s are perfectly normal things to do in public."
def sub2(s1, s2):
	return t2 % (s1, s2)
print sub2("running", "sleeping") 
# => "I think running and sleeping are perfectly normal things to do in public."

# Finally, even more complex
#		Instead of stacking tonnes of %s, then %(s1, s2, s3, etc.)
#		We can use names and dictionaries
"test %(NAME)s text" % {"NAME": value}
# The name can appear in the string multiple times, and we can have multiple names

# Example
t3 = "I'm %(nickname)s. My real name is %(name)s, but my friends call me %(nickname)s."
def sub_m(name, nickname):
	return t3 % {"name": name, "nickname": nickname} 
print sub_m("Mike", "Goose") 
# => "I'm Goose. My real name is Mike, but my friends call me Goose."

# Ok, so we've integrated the above
# 	We now have a form that's showing an error message when you input the wrong data
# 	But it would be nice to keep the correct data!
# Let's look at default values:
<input type="text" value="cool">

# So for perserving a correct month, we'd do something like:
<input type="text" name="month" value="%(month)s">

- What about weird input?
	- For example, say someone enters foo">derp as the month
	- We'll be substituting this into the input tag's value attribute
		- So we'll get:
		<input value="foo">derp">
		- the string will be cut off, and it will be followed by derp">
			- Not what we want!
		- And what if instead of derp, they put in some malicious shit!

- How to fix this?  Escaping!
	- instead of returning ", we return &quot;
	- also:
		>		&gt;
		<		&lt;
		&		&amp;

- My escape html function:
def escape_html(s):
	terms = {
		">": "&gt;",
		"<": "&lt;",
		'"': "&quot;",
		"&": "&amp;"
	}
	l = list(s)
	output = []
	for c in l:
		if c in terms:
			output.append(terms[c])
		else:
			output.append(c)
	return "".join(output)

- Their solution:
def escape_html(s):
	for (i, o) in (("&", "&amp;"),
									(">", "&gt;"),
									("<", "&lt;"),
									('"', "&quot;")):
		s = s.replace(i, o)
	return s

- Or even simpler
import cgi
def escape_html(s):
	return cgi.escape(s, quote = True)


- Redirection
	- OK, so up to now our "success" doesn't send you to a new page
		- This is annoying because you can't share the link
		- You also can't refresh without an annoying message
	- Instead of returning the success HTML, we should return a redirect!
		- The server sends the redirect, then when we hit the new page we send a GET request, then we get the success HTML

- Optimal form behaviour
	- Keep re-serving the form until the user enters valid info
	- Once you get valid input, redirect them to a success page

- What we need to do:
	- make a "thanks" handler
	- add the /thanks URL
	- redirect to the /thanks URL

- In this case:
	- the post method of the main handler will redirect to /thanks when it gets valid data
	- the thanks handler will write our success message when it gets a GET request
	- finally, we must map '/thanks' to the ThanksHandler

###########
# Our app so far
###########

import webapp2
import cgi

months = ['January',
	'February',
	'March',
	'April',
	'May',
	'June',
	'July',
	'August',
	'September',
	'October',
	'November',
	'December']

month_abbvs = dict((m[:3].lower(), m) for m in months)

def valid_month(month):
	if month:
		short_month = month[:3].lower()
		return month_abbvs.get(short_month)

def valid_day(day):
	if day and day.isdigit():
		day = int(day)
		if day > 0 and day <= 31:
			return day

def valid_year(year):
	if year and year.isdigit():
		year = int(year)
		if year > 1900 and year < 2020:
			return year

def escape_html(s):
	return cgi.escape(s, quote = True)

form = """
<form method="post">
	What is your birthday?
	<br>
	
	<label> Month
		<input type="text" name="month" value="%(month)s">
	</label>
	
	<label> Day
		<input type="text" name="day" value="%(day)s">
	</label>

	<label> Year
		<input type="text" name="year" value="%(year)s">
	</label>

	<div style="color: red">%(error)s</div>

	<br>
	<br>
	<input type="submit">
</form>
"""

class MainHandler(webapp2.RequestHandler):
	def write_form(self, error="", month="", day="", year=""):
	# We will be calling this instead of:
	# self.response.out.write(form)
	# Because it let's us substitute in error messages
		self.response.out.write(form % {"error": error,
			"month": escape_html(month),
			"day": escape_html(day),
			"year": escape_html(year)})

	def get(self):
		self.write_form()

	def post(self):
		user_month = self.request.get('month')
		user_day = self.request.get('day')
		user_year = self.request.get('year')

		month = valid_month(user_month)
		day = valid_day(user_day)
		year = valid_year(user_year)

		if not (month and day and year):
			self.write_form("That doesn't look valid to me, friend.",
				user_month, user_day, user_year)
			# We've used our error message!
		else:
			self.redirect("/thanks")

class ThanksHandler(webapp2.RequestHandler):
	def get(self):
		self.response.out.write("Thanks! That's a totally valid day!")

app = webapp2.WSGIApplication([('/', MainHandler),
	('/thanks', ThanksHandler)],
	debug=True)

##########
# End of app
##########


#####################################
Problem Set 2
#####################################





