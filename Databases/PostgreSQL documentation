# Typically want a separate db for each project, for each user
# To create a db
createdb mydb

# log in
psql mydb

# if you're a normal user you'll see:
mydb=>
# if you're the db superuser, you'll see
mydb=#

# Some sample queries
SELECT verison();
SELECT current_date;
SELECT 2+2;

# Internal commands
\h			# help with commands
					# i.e. \h SELECT
\q			# quit
\?			# more internal commands
\i file.sql		# reads in SQL commands from a sql file

# Tables
# 	Columns have a fixed order in each row
# 	Rows DO NOT have a guaranteed order, though they can be sorted for display

# Tables are grouped into databases
# 	A collection of dbs managed by a single PostgreSQL server instance constitutes a database cluster

# Creating a new table
# 	Use the following syntax
CREATE TABLE weather (
    city            varchar(80),
    temp_lo         int,           -- low temperature
    temp_hi         int,           -- high temperature
    prcp            real,          -- precipitation
    date            date
);
CREATE TABLE cities (
    name            varchar(80),
    location        point
);
# Note how both comments (--) and whitesapce (spaces or dashes) are ignored
# SQL is case insensitive about keywords and identifiers, EXCEPT when double-quoted to preserve case (not done above)
# Can also drop tables like this:
DROP TABLE cities;

# PostgreSQL types
int
smallint
real
double precision
char(N)
varchar(N)
date
time
timestamp
interval
# Also a bunch of other general utility types
# And a rich set of geometric types
# AND you can define your own data types
# Because of this, types ARE NOT keywords, except in specific cases where they need to be

# Populating a table with rows
INSERT INTO weather VALUES ('San Francisco', 46, 50, 0.25, '1994-11-27');
# Check
SELECT * FROM WEATHER;

# Another example
INSERT INTO cities VALUES ('San Francisco', '(-194.0, 53.0)');
SELECT * FROM cities;

# Some notes:
# 	Everything that's not a simple numeric value must be surrounded by single quotes (even dates, points, etc.)
# 	point accepts coordinate pairs

# You can also explicitly say which data to insert into which columns
# 	This way you don't have to remember the order of columns
# 	You also don't have to enter NULL values, but you can if you want
INSERT INTO weather (date, city, temp_hi, temp_lo)
	VALUES ('1994-11-29', 'Hayward', 54, 37);
INSERT INTO weather (city, temp_lo, temp_hi, prcp, date)
	VALUES ('San Francisco', 43, 57, NULL,'1994-11-29');
SELECT * FROM weather;

# Then to alter data:
UPDATE weather SET (prcp, temp_hi) = (0, 58)
	WHERE city = 'San Francisco' AND date = '1994-11-29';

# You can also insert data from flat text files, for example:
COPY weather FROM '/home/user/weather.txt';
# The source file must be stored on the machine running psql, not on the client
# Read more about COPY here:
http://www.postgresql.org/docs/9.3/interactive/sql-copy.html


############
# Basic queries
############

SELECT city, temp_lo, temp_hi, date FROM weather;

SELECT city, (temp_lo + temp_hi)/2 AS temp_avg, date FROM weather;

SELECT * FROM weather
	WHERE city = 'San Francisco' and prcp > 0.0;

SELECT * FROM weather
	ORDER BY city, temp_lo;

SELECT DISTINCT city
	FROM weather
	ORDER BY city;


############
# Joins
############

SELECT *
	FROM weather, cities
	WHERE city = name;
# What will this return?
# 	1) It'll be an INNER JOIN, won't include cities that aren't in both tables
# 	2) It'll have both the city and name fields (duplicate info)
# 		Can "fix" this by explicitly specifying columns
SELECT city, temp_lo, temp_hi, prcp, date, location
	FROM weather, cities
	WHERE city = name;
# It's even better form to state what table everything is coming from
SELECT weather.city, weather.temp_lo, weather.temp_hi, weather.prcp, weather.date, cities.location
	FROM weather, cities
	WHERE cities.name = weather.city;

# Other join syntax
SELECT *
	FROM weather
	INNER JOIN cities ON (weather.city = cities.name);

# Or, if we want all cities in the weather table
SELECT *
	FROM weather
	LEFT OUTER JOIN cities ON (weather.city = cities.name);

# Self joins
# 	For example, let's say we want to find all cities with temperature ranges that that fall completely within anther city's temp range
SELECT W1.city AS outer_city,
	W1.temp_lo AS outer_low,
	W1.temp_hi AS outer_high,
	W2.city AS inner_city,
	W2.temp_lo AS inner_low,
	W2.temp_hi AS inner_high
FROM weather W1, weather W2
WHERE W1.temp_lo < W2.temp_lo
	AND W1.temp_hi > W2.temp_hi;


############
# Aggregate functions
############

SELECT MAX(temp_lo) FROM weather;
# 46

# But what if we want to know what city, or cities, that max temp occurs in?
SELECT city
FROM weather
WHERE temp_lo = (
	SELECT MAX(temp_lo)
	FROM weather
);
# San Francisco
# Note the use of nesting
# 	Need to find the max temp first, then can find the cities

# Aggregates also go great with GROUP BY
SELECT city,
	MAX(temp_lo)
FROM weather
GROUP BY city
HAVING MAX(temp_lo) < 40;

# Note the use of HAVING
# 	Similar to a WHERE clause
# 	With a WHERE clause only the rows with temp_lo < 40 would be included
# 	But if one city occurs multiple times, sometimes with temp_lo below and sometimes above 40, the WHERE clause won't exclude the city
# 	HAVING will exclude the city, it filters for cities that ONLY have temp_lo values below 40

# More on HAVING vs. WHERE
# 	1) WHERE selects rows before the groups/aggregates are computed, while HAVING selects rows after groups and aggregates are computed
# 	2) HAVING should really only be used with groups/aggregates
# 	3) Sometimes you can use either - use WHERE in that case, as it's more efficient (filtering out rows before aggregating means less work to aggregate)


############
# Updates and deletions
############

# Say all temps are off by 2 degrees after November 28th
# 	How to correct?
# 		Use UPDATE
UPDATE weather
	SET temp_hi = temp_hi - 2, temp_lo = temp_lo - 2
	WHERE date > '1994-11-28';

# Or what if we're no longer interested in the weather of Hayward?
DELETE
	FROM weather
	WHERE city = 'Hayward';

# Be really careful with delete!!!!!
#		For example, this would delete all rows, and wouldn't even ask you for confirmation:
DELETE FROM weather;
# Super dangerous!!!!!


############
# Views
############

# Views are basically queries saved to a specific name
# You can then SELECT from the view, just as you would from a table
CREATE VIEW myview AS
	SELECT city, temp_lo, temp_hi, prcp, date, location
		FROM weather, cities
		WHERE city = name;

SELECT * FROM myview;

# Can then type
\dv
# To list all views (similar to \dt for tables)


############
# Foreign Keys
############

# Drop old tables (and dependents, like views)
DROP TABLE cities CASCADE;
DROP TABLE weather CASCADE;

# Now create them again, but with cities in both tables intrinsically linked
CREATE TABLE cities (
	city      varchar(80) primary key,
	location  point
);

CREATE TABLE weather (
	city      varchar(80) references cities(city),
	temp_lo   int,
	temp_hi   int,
	prcp      real,
	date      date
);

# Now try inserting an invlaid record

INSERT INTO weather VALUES ('Berkeley', 45, 53, 0.0, '1994-11-28');
-- ERROR:  insert or update on table "weather" violates foreign key constraint "weather_city_fkey"
-- DETAIL:  Key (city)=(Berkeley) is not present in table "cities".

# More on this later, in Chapter 5


############
# Transactions
############

# A transaction bundles multiple steps into a single, all-or-nothing operation
# 	If any step fails, none of them affect the db at all

# Example, image we've got a bank
CREATE TABLE accounts (
  name         varchar(80),
  balance      real,
  branch_name  varchar(80)
);

CREATE TABLE branches (
  name         varchar(80),
  balance      real
);

INSERT INTO accounts (name, balance, branch_name) VALUES ('Alice', 452.05, 'Kitsilano');
INSERT INTO accounts (name, balance, branch_name) VALUES ('Bob', 123.79, 'Kitsilano');
INSERT INTO accounts (name, balance, branch_name) VALUES ('Keith', 99452.00, 'Point Grey');

SELECT SUM(balance) FROM accounts WHERE branch_name = 'Kitsilano';
# 575.84
INSERT INTO branches (name, balance) VALUES ('Kitsilano', 575.84);
INSERT INTO branches (name, balance) VALUES ('Point Grey', 99452.00);

# Now let's try a transaction
#   We want to make sure that when someone deposits or withdraws money
#   We just do what we would normally do, but surround it with BEGIN and COMMIT
# For example, say Alice is sending $100 to Bob
#   We need to make sure that EVERYTHING updates!
BEGIN;
UPDATE accounts SET balance = balance - 100
  WHERE name = 'Alice';
UPDATE branches SET balance = balance - 100
  WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Alice');
UPDATE accounts SET balance = balance + 100
  WHERE name = 'Bob';
UPDATE branches SET balance = balance + 100
  WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Bob');
COMMIT;

# Or, say you're entering a transaction, then you realize you want to cancel before you're done?
#   Just enter ROLLBACK instead of COMMIT
BEGIN;
UPDATE accounts SET balance = balance - 100
  WHERE name = 'Alice';
UPDATE branches SET balance = balance - 100
  WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Alice');
ROLLBACK;

# Can also include SAVEPOINT, which change the behaviour of ROLLBACK, so you can roll back to them instead of all the way to the start
# 	Example:
BEGIN;
UPDATE accounts SET balance = balance - 100
  WHERE name = 'Alice';
SAVEPOINT my_savepoint;
UPDATE accounts SET balance = balance + 100
  WHERE name = 'Bob';
-- oops, that transaction was supposed to go to Wally, not Bob!
ROLLBACK TO my_savepoint;
UPDATE accounts SET balance = balance + 100
  WHERE name = 'Wally';
COMMIT;

# For the above example to work, I should have added 'Wally'
#   I'll give him as much money as everyone else combined
BEGIN;
INSERT INTO accounts (name, balance, branch_name)
  VALUES ('Wally', (SELECT SUM(balance) FROM accounts), 'Point Grey');
UPDATE branches SET balance = balance + (SELECT balance FROM accounts WHERE name = 'Wally')
  WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Wally');
COMMIT;


############
# Window Functions
############

# A window function performs a calculation accross a set of rows that are somehow related to the current row
# 	Comparable to the type of calculation done with an aggregate function
# 	BUT aggregate groups rows into a single output, window does not

SELECT name,
  balance,
  branch_name,
  AVG(balance)
  OVER (PARTITION BY branch_name)
  FROM accounts;
# Returns
--  name  | balance | branch_name |       avg        
-- -------+---------+-------------+------------------
--  Alice |  352.05 | Kitsilano   | 312.919998168945
--  Bob   |  273.79 | Kitsilano   | 312.919998168945
--  Keith |   99452 | Point Grey  |   99764.91796875
--  Wally |  100078 | Point Grey  |   99764.91796875

# So it's like a normal SELECT, but we can add a new calculated row!
#   We can also throw an ORDER BY into the OVER function, which will order the rows within each PARTITION
SELECT name,
  balance,
  branch_name,
  RANK() OVER (PARTITION BY branch_name ORDER BY balance DESC)
  FROM accounts;
# Returns
--  name  | balance | branch_name | rank 
-- -------+---------+-------------+------
--  Alice |  352.05 | Kitsilano   |    1
--  Bob   |  273.79 | Kitsilano   |    2
--  Wally |  100078 | Point Grey  |    1
--  Keith |   99452 | Point Grey  |    2

# Some notes:
# 	1) OVER is processed after FROM, WHERE, GROUP BY and HAVING
# 		So if we've already filtered out rows with WHERE, OVER won't see them
# 	2) Queries can have multiple OVER clauses to slice up the data in different ways!

# What if we ommit partitions?
SELECT name,
  balance,
  branch_name,
  AVG(balance) OVER ()
  FROM accounts;
--  name  | balance | branch_name |       avg        
-- -------+---------+-------------+------------------
--  Keith |   99452 | Point Grey  | 50038.9189834595
--  Alice |  352.05 | Kitsilano   | 50038.9189834595
--  Bob   |  273.79 | Kitsilano   | 50038.9189834595
--  Wally |  100078 | Point Grey  | 50038.9189834595

# Behaves just as you'd expect, one big parition
# Interesting note, if you ommit PARTITION, ORDER BY works VERRRRY differently!
SELECT name,
  balance,
  branch_name,
  AVG(balance) OVER (ORDER BY balance ASC)
  FROM accounts;
--  name  | balance | branch_name |       avg        
-- -------+---------+-------------+------------------
--  Bob   |  273.79 | Kitsilano   | 273.790008544922
--  Alice |  352.05 | Kitsilano   | 312.919998168945
--  Keith |   99452 | Point Grey  | 33359.2799987793
--  Wally |  100078 | Point Grey  | 50038.9189834595

# Gives you a sort of running average!

# Finally, if you want to filter or GROUP BY the rows after the window calculations are performed, just nest queries
SELECT u.name, u.balance, u.branch_name, u.rank
FROM
  (SELECT name, balance, branch_name,
    RANK() OVER (PARTITION BY branch_name ORDER BY balance DESC) AS rank
    FROM accounts
  ) AS u
WHERE u.rank = 1;
--  name  | balance | branch_name | rank 
-- -------+---------+-------------+------
--  Alice |  352.05 | Kitsilano   |    1
--  Wally |  100078 | Point Grey  |    1

# If you want to involve multiple window functions, it's best to do so like this:
SELECT name, balance, branch_name,
  AVG(balance) OVER w AS branch_avg_balance,
  SUM(balance) OVER w AS branch_total_balance
  FROM accounts
  WINDOW w AS (PARTITION BY branch_name ORDER BY balance DESC);
--  name  | balance | branch_name | branch_avg_balance | branch_total_balance 
-- -------+---------+-------------+--------------------+----------------------
--  Alice |  352.05 | Kitsilano   |   352.049987792969 |               352.05
--  Bob   |  273.79 | Kitsilano   |   312.919998168945 |               625.84
--  Wally |  100078 | Point Grey  |     100077.8359375 |               100078
--  Keith |   99452 | Point Grey  |     99764.91796875 |               199530

# This is still sort of doing the running total stuff, but whatever




# Left off at:

http://www.postgresql.org/docs/9.3/interactive/tutorial-inheritance.html

[start]